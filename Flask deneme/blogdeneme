from logging import raiseExceptions
from flask import Flask,render_template,flash,redirect,url_for,session,logging,request
from flask.signals import message_flashed, template_rendered
from flask.templating import render_template_string

from flask_mysqldb import MySQL
from wtforms import Form,StringField,TextAreaField,PasswordField,validators
from passlib.hash import sha256_crypt
from functools import wraps
#Kullanıcı girişi Decoratoru
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if "logged_in" in session:
            return f(*args, **kwargs)
        else:
            flash("Bu sayfayı görüntülemek için önce giriş yapmalısınız...:(","warning")
            return redirect(url_for("index"))
    return decorated_function 
app = Flask(__name__)
class RegisterForm(Form):
    name = StringField("İsim Soyisim: ",validators= [validators.Length(min = 4,max = 25,message = "İsminiz geçersiz")])
    username = StringField("Kullanıcı ismi: ",validators= [validators.Length(min = 2,max = 45)])
    email = StringField("Email: ",validators= [validators.Length(min = 10,max = 200,message = "E-postanız geçersiz karakter içeriyor")])
    password = PasswordField("Parola: ",validators =[validators.DataRequired(message = "Lütfen bir parola giriniz"),
    validators.EqualTo(fieldname = "confirm",
    message = "Parolanız uyuşmuyor")])
    confirm = PasswordField("Paralonızı tekrar giriniz:")
class LoginForm(Form):
    username = StringField("Kullanıcı adı")
    password = PasswordField("Şifre")

app.config["MYSQL_HOST"] = "localhost"
app.config["MYSQL_USER"] = "root"
app.config["MYSQL_PASSWORD"] = ""
app.config["MYSQL_DB"] = "aydınkitap"
app.config["MYSQL_CURSORCLASS"] = "DictCursor"

app.secret_key = "aydınKitap"
mysql = MySQL(app)

@app.route("/")
def index():

    return render_template("indexx.html")
@app.route("/about")
def about():
    return render_template("about.html")
@app.route("/dashboard")
@login_required
def dashboard():
    cursor = mysql.connection.cursor()
    sorgu = "Select * From articles where author = %s"
    result = cursor.execute(sorgu,(session["username"],))
    if result > 0:
        articles = cursor.fetchall()
        return render_template("dashboard.html",articles = articles)
    else:
        return render_template("dashboard.html")
#@app.route("/article/<string:id>")
#def detail(id):
#      return "Article Id: " + id
#detay sayfası

@app.route("/article/<string:id>")
def article(id):
    cursor = mysql.connection.cursor()
    sorgu = "Select * From articles where id = %s"
    result = cursor.execute(sorgu,(id,))
    if result > 0:
        article = cursor.fetchone()
        return render_template("article.html",article = article)
    else:
        return render_template("article.html")
#kayıt olma
@app.route("/register",methods = ["GET","POST"])
def register():
    form = RegisterForm(request.form)
    
    if request.method == "POST" and form.validate():
        name = form.name.data 
        username = form.username.data 
        email = form.email.data 
        password = sha256_crypt.encrypt(form.password.data)

        cursor = mysql.connection.cursor()
        sorgu = "Insert into users(name,username,email,password) VALUES(%s,%s,%s,%s)"

        cursor.execute(sorgu,(name,username,email,password))
        mysql.connection.commit()
        cursor.close()
        flash("Başarı ile kayıt oldunuz...:)","success")
        #flash("Basarısız oldunuz","warning")
        return redirect(url_for("login"))
    else:
        return render_template("register.html", form = form)
@app.route("/login",methods = ["GET","POST"])
def login():
    form = LoginForm(request.form)

    if request.method == "POST":
        username = form.username.data
        password_entered = form.password.data

        cursor = mysql.connection.cursor()

        sorgu = "Select * From users where username = %s"

        result = cursor.execute(sorgu,(username,))

        if result > 0:
            data = cursor.fetchone()
            #bütün verilerin içerisinde gezinmeyi sağlar
            real_password = data["password"]
            if sha256_crypt.verify(password_entered,real_password):
                flash("Hoşgeldiniz ...:)","success")

                session["logged_in"] = True
                session["username"] = username

                return redirect(url_for("index"))
            else:
                flash("Şifrenizi veya Kullanıcı adınızı yanlış girdiniz","danger")
                return redirect(url_for("login"))
        else:
            flash("Yanlış kullanıcı girişi...:(","warning")
            return redirect(url_for("login"))

    return render_template("login.html",form = form)
@app.route("/logout")
def logout():
    session.clear
    return redirect(url_for("index"))
#Makale ekleme
@app.route("/addarticle",methods = ["GET","POST"])
def addarticle():
    form = ArticleForm(request.form)
    if request.method == "POST" and form.validate():
        title = form.title.data
        content = form.content.data 
        cursor = mysql.connection.cursor()
        sorgu = "Insert into articles(title,author,content) VALUES (%s,%s,%s)"
        cursor.execute(sorgu,(title,session["username"],content))
        mysql.connection.commit()
        cursor.close()
        flash("Makale Başarıyla Eklendi","success")
        return redirect(url_for("dashboard"))
    return render_template("addarticle.html",form = form)
#Makale Sayfası
@app.route("/articles")
def articles():
    cursor = mysql.connection.cursor()
    sorgu = "Select * From articles"
    result = cursor.execute(sorgu)
    if result > 0:
        articles = cursor.fetchall()
        return render_template("articles.html",articles = articles)
    else:
        return render_template("articles.html")
#Makale silme
@app.route("/delete/<string:id>")
@login_required
def delete(id):
    cursor = mysql.connection.cursor()
    sorgu = "Select * from articles where author = %s and id = %s"
    result = cursor.execute(sorgu,(session["username"],id))
    if result > 0:
        sorgu2 = "Delete from articles where id = %s"
        cursor.execute(sorgu2,(id,))
        mysql.connection.commit()
        return redirect(url_for("dashboard"))
    else:
        flash("Bu işleme yetkiniz yok!!!","danger")
        return redirect(url_for("index"))
#Makale Güncelleme
@app.route("/edit/<string:id>",methods = ["GET","POST"])
@login_required
def update(id):
    if request.method == "GET":
        cursor = mysql.connection.cursor()
        sorgu = "Select * From articles where id = %s and author = %s"
        result = cursor.execute(sorgu,(id,session["username"]))
        if result == 0:
            flash("Buna yetkiniz yok henüz!!!","warning")
            return redirect(url_for("index"))
        else:
            article = cursor.fetchone()
            form = ArticleForm()
            form.title.data = article["title"]
            form.content.data = article["content"]
            return render_template("update.html",form = form)

    else:
        #POST request
        form = ArticleForm(request.form)
        newTitle = form.title.data 
        newContent = form.content.data
        sorgu2 = "Update articles Set title = %s,content = %s where id = %s"
        cursor = mysql.connection.cursor()
        cursor.execute(sorgu2,(newTitle,newContent,id))
        mysql.connection.commit()
        flash("Makaleniz başarı ile güncellendi","success")
        return redirect(url_for("dashboard"))

#Makale formu oluşturma
class ArticleForm(Form):
    title = StringField("Makale Başlığı",validators = [validators.Length(min = 5,max = 100)])
    content = TextAreaField("Makale İçeriği",validators = [validators.Length(min = 10)])
class AccountForm(Form):
    name = StringField("İsminiz",validators = [validators.Length(min = 2)])
    birthdate = StringField("Dogum Tarihi",validators = [validators.Length(min = 5)])
    character = TextAreaField("Hobileriniz",validators = [validators.Length(min = 5)])
@app.route("/account",methods = ["GET","POST"])
@login_required
def account():
    form = AccountForm(request.form)
    if request.method == "POST" and form.validate():
        name = form.name.data 
        birthdate = form.birthdate.data 
        character = form.character.data 
        cursor = mysql.connection.cursor()
        sorgu = "Insert into account1(name,birth_date,characterr) Values(%s,%s,%s)"
        cursor.execute(sorgu,(name,birthdate,character))
        mysql.connection.commit()
        cursor.close()
        flash("Bilgileriniz başarı ile alındı","success")
        return redirect(url_for("accountinto"))
    else:
        return render_template("account.html",form = form)
@app.route("/accountinto/<string:id>")
@login_required
def accountinto(id):
    cursor = mysql.connection.cursor()
    sorgu = "Select * From account1 where id = %s"
    result = cursor.execute(sorgu,(id,))
    if result > 0:
        account = cursor.fetchone()
        return render_template("accountinto.html",account = account)
    else:
        return render_template("accountinto.html")


"""@app.route("/")
def index():
    return render_template("indexx.html")"""
@app.route("/search",methods = ["GET","POST"])
def search():
    if request.method == "GET":
        return redirect(url_for("index"))
    else:
        keyword = request.form.get("keyword")
        cursor = mysql.connection.cursor()
        sorgu = "Select * From articles where title like '%" + keyword + "%'"
        result = cursor.execute(sorgu)
        if result == 0:
            flash("Aranan kelime bulunamadı...:(","danger")
            return redirect(url_for("articles"))
        else:
            articles = cursor.fetchall()
            return render_template("articles.html",articles = articles)

if __name__ == "__main__":
    app.run(debug=True)